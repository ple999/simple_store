// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package simple_store_sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteCountries = `-- name: DeleteCountries :exec
delete from countries
where country_id=$1
`

func (q *Queries) DeleteCountries(ctx context.Context, countryID int64) error {
	_, err := q.db.Exec(ctx, deleteCountries, countryID)
	return err
}

const deleteMerchant = `-- name: DeleteMerchant :exec
delete from  merchants
where merchant_id=$1
`

func (q *Queries) DeleteMerchant(ctx context.Context, merchantID int64) error {
	_, err := q.db.Exec(ctx, deleteMerchant, merchantID)
	return err
}

const deleteOrderHeader = `-- name: DeleteOrderHeader :exec
delete from  order_header
where order_header_id=$1
`

func (q *Queries) DeleteOrderHeader(ctx context.Context, orderHeaderID int64) error {
	_, err := q.db.Exec(ctx, deleteOrderHeader, orderHeaderID)
	return err
}

const deleteOrderLines = `-- name: DeleteOrderLines :exec
delete from order_lines
where line_id=$1
`

func (q *Queries) DeleteOrderLines(ctx context.Context, lineID int64) error {
	_, err := q.db.Exec(ctx, deleteOrderLines, lineID)
	return err
}

const deleteOrderLinesUsingOrderHeaderID = `-- name: DeleteOrderLinesUsingOrderHeaderID :exec
delete from order_lines
where order_header_id=$1
`

func (q *Queries) DeleteOrderLinesUsingOrderHeaderID(ctx context.Context, orderHeaderID pgtype.Int8) error {
	_, err := q.db.Exec(ctx, deleteOrderLinesUsingOrderHeaderID, orderHeaderID)
	return err
}

const deleteOrderStatus = `-- name: DeleteOrderStatus :exec
delete from order_statuses
where order_status_id=$1
`

func (q *Queries) DeleteOrderStatus(ctx context.Context, orderStatusID int64) error {
	_, err := q.db.Exec(ctx, deleteOrderStatus, orderStatusID)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
delete from products
where product_id=$1
`

func (q *Queries) DeleteProduct(ctx context.Context, productID int64) error {
	_, err := q.db.Exec(ctx, deleteProduct, productID)
	return err
}

const deleteProductStatus = `-- name: DeleteProductStatus :exec
delete from product_statuses
where product_status_id=$1
`

func (q *Queries) DeleteProductStatus(ctx context.Context, productStatusID int64) error {
	_, err := q.db.Exec(ctx, deleteProductStatus, productStatusID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
delete from users
where user_id=$1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getAllCountries = `-- name: GetAllCountries :many
select country_id, country_code, country_name, continent_name from countries
`

func (q *Queries) GetAllCountries(ctx context.Context) ([]Country, error) {
	rows, err := q.db.Query(ctx, getAllCountries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Country
	for rows.Next() {
		var i Country
		if err := rows.Scan(
			&i.CountryID,
			&i.CountryCode,
			&i.CountryName,
			&i.ContinentName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCountriesByPage = `-- name: GetAllCountriesByPage :many
select country_id, country_code, country_name, continent_name from countries
offset $1
fetch next $2 rows only
`

type GetAllCountriesByPageParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) GetAllCountriesByPage(ctx context.Context, arg GetAllCountriesByPageParams) ([]Country, error) {
	rows, err := q.db.Query(ctx, getAllCountriesByPage, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Country
	for rows.Next() {
		var i Country
		if err := rows.Scan(
			&i.CountryID,
			&i.CountryCode,
			&i.CountryName,
			&i.ContinentName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllMerchants = `-- name: GetAllMerchants :many
select merchant_id, merchant_first_name, merchant_last_name, country_id, user_id from merchants
`

func (q *Queries) GetAllMerchants(ctx context.Context) ([]Merchant, error) {
	rows, err := q.db.Query(ctx, getAllMerchants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Merchant
	for rows.Next() {
		var i Merchant
		if err := rows.Scan(
			&i.MerchantID,
			&i.MerchantFirstName,
			&i.MerchantLastName,
			&i.CountryID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllOrders = `-- name: GetAllOrders :many
select order_header_id, order_date, order_status_id, user_id, merchant_id from order_header
`

func (q *Queries) GetAllOrders(ctx context.Context) ([]OrderHeader, error) {
	rows, err := q.db.Query(ctx, getAllOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderHeader
	for rows.Next() {
		var i OrderHeader
		if err := rows.Scan(
			&i.OrderHeaderID,
			&i.OrderDate,
			&i.OrderStatusID,
			&i.UserID,
			&i.MerchantID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProducts = `-- name: GetAllProducts :many
select product_id, product_name, product_price, product_status_id, merchant_id from products
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ProductID,
			&i.ProductName,
			&i.ProductPrice,
			&i.ProductStatusID,
			&i.MerchantID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
select user_id, first_name, last_name, salt, password, email, country_id from users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Salt,
			&i.Password,
			&i.Email,
			&i.CountryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountryByID = `-- name: GetCountryByID :one
select country_id, country_code, country_name, continent_name from countries
where country_id=$1
`

func (q *Queries) GetCountryByID(ctx context.Context, countryID int64) (Country, error) {
	row := q.db.QueryRow(ctx, getCountryByID, countryID)
	var i Country
	err := row.Scan(
		&i.CountryID,
		&i.CountryCode,
		&i.CountryName,
		&i.ContinentName,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select salt,password from users
where email=$1
`

type GetUserByEmailRow struct {
	Salt     pgtype.Text
	Password pgtype.Text
}

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.Salt, &i.Password)
	return i, err
}

const insertCountry = `-- name: InsertCountry :one
insert into countries(
    country_code,
    country_name,
    continent_name
) values(
    $1,
    $2,
    $3
) 
returning country_id, country_code, country_name, continent_name
`

type InsertCountryParams struct {
	CountryCode   pgtype.Text
	CountryName   pgtype.Text
	ContinentName pgtype.Text
}

func (q *Queries) InsertCountry(ctx context.Context, arg InsertCountryParams) (Country, error) {
	row := q.db.QueryRow(ctx, insertCountry, arg.CountryCode, arg.CountryName, arg.ContinentName)
	var i Country
	err := row.Scan(
		&i.CountryID,
		&i.CountryCode,
		&i.CountryName,
		&i.ContinentName,
	)
	return i, err
}

const insertMerchant = `-- name: InsertMerchant :one
insert into merchants(
    merchant_first_name,
    merchant_last_name,
    country_id,
    user_id
) values(
    $1,
    $2,
    $3,
    $4
)
returning merchant_id, merchant_first_name, merchant_last_name, country_id, user_id
`

type InsertMerchantParams struct {
	MerchantFirstName pgtype.Text
	MerchantLastName  pgtype.Text
	CountryID         pgtype.Int8
	UserID            pgtype.Int8
}

func (q *Queries) InsertMerchant(ctx context.Context, arg InsertMerchantParams) (Merchant, error) {
	row := q.db.QueryRow(ctx, insertMerchant,
		arg.MerchantFirstName,
		arg.MerchantLastName,
		arg.CountryID,
		arg.UserID,
	)
	var i Merchant
	err := row.Scan(
		&i.MerchantID,
		&i.MerchantFirstName,
		&i.MerchantLastName,
		&i.CountryID,
		&i.UserID,
	)
	return i, err
}

const insertOrderHeader = `-- name: InsertOrderHeader :one
insert into order_header(
    order_date,
    order_status_id,
    user_id,
    merchant_id
) values(
    $1,
    $2,
    $3,
    $4
)
returning order_header_id, order_date, order_status_id, user_id, merchant_id
`

type InsertOrderHeaderParams struct {
	OrderDate     pgtype.Timestamp
	OrderStatusID pgtype.Int8
	UserID        pgtype.Int8
	MerchantID    pgtype.Int8
}

func (q *Queries) InsertOrderHeader(ctx context.Context, arg InsertOrderHeaderParams) (OrderHeader, error) {
	row := q.db.QueryRow(ctx, insertOrderHeader,
		arg.OrderDate,
		arg.OrderStatusID,
		arg.UserID,
		arg.MerchantID,
	)
	var i OrderHeader
	err := row.Scan(
		&i.OrderHeaderID,
		&i.OrderDate,
		&i.OrderStatusID,
		&i.UserID,
		&i.MerchantID,
	)
	return i, err
}

const insertOrderLines = `-- name: InsertOrderLines :one
insert into order_lines(
    product_id,
    quantity,
    order_header_id
) values(
    $1,
    $2,
    $3
)
returning line_id, product_id, order_header_id, quantity
`

type InsertOrderLinesParams struct {
	ProductID     pgtype.Int8
	Quantity      pgtype.Int4
	OrderHeaderID pgtype.Int8
}

func (q *Queries) InsertOrderLines(ctx context.Context, arg InsertOrderLinesParams) (OrderLine, error) {
	row := q.db.QueryRow(ctx, insertOrderLines, arg.ProductID, arg.Quantity, arg.OrderHeaderID)
	var i OrderLine
	err := row.Scan(
		&i.LineID,
		&i.ProductID,
		&i.OrderHeaderID,
		&i.Quantity,
	)
	return i, err
}

const insertOrderStatus = `-- name: InsertOrderStatus :one
insert into order_statuses(
    order_status_name
) values(
    $1
)
returning order_status_id, order_status_name
`

func (q *Queries) InsertOrderStatus(ctx context.Context, orderStatusName pgtype.Text) (OrderStatus, error) {
	row := q.db.QueryRow(ctx, insertOrderStatus, orderStatusName)
	var i OrderStatus
	err := row.Scan(&i.OrderStatusID, &i.OrderStatusName)
	return i, err
}

const insertProduct = `-- name: InsertProduct :one
insert into products(
    product_name,
    product_price,
    product_status_id,
    merchant_id
) values(
    $1,
    $2,
    $3,
    $4
)
returning product_id, product_name, product_price, product_status_id, merchant_id
`

type InsertProductParams struct {
	ProductName     pgtype.Text
	ProductPrice    pgtype.Int4
	ProductStatusID pgtype.Int8
	MerchantID      pgtype.Int8
}

func (q *Queries) InsertProduct(ctx context.Context, arg InsertProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, insertProduct,
		arg.ProductName,
		arg.ProductPrice,
		arg.ProductStatusID,
		arg.MerchantID,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.ProductPrice,
		&i.ProductStatusID,
		&i.MerchantID,
	)
	return i, err
}

const insertProductStatus = `-- name: InsertProductStatus :one
insert into product_statuses(
    status_name
)values(
    $1
)
returning product_status_id, status_name
`

func (q *Queries) InsertProductStatus(ctx context.Context, statusName pgtype.Text) (ProductStatus, error) {
	row := q.db.QueryRow(ctx, insertProductStatus, statusName)
	var i ProductStatus
	err := row.Scan(&i.ProductStatusID, &i.StatusName)
	return i, err
}

const insertUser = `-- name: InsertUser :one
insert into users(
    first_name,
    last_name,
    password,
    salt,
    email,
    country_id
) values(
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
returning user_id, first_name, last_name, salt, password, email, country_id
`

type InsertUserParams struct {
	FirstName pgtype.Text
	LastName  pgtype.Text
	Password  pgtype.Text
	Salt      pgtype.Text
	Email     pgtype.Text
	CountryID pgtype.Int8
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.FirstName,
		arg.LastName,
		arg.Password,
		arg.Salt,
		arg.Email,
		arg.CountryID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Salt,
		&i.Password,
		&i.Email,
		&i.CountryID,
	)
	return i, err
}

const updateCountry = `-- name: UpdateCountry :one
update countries
set country_code=$1,
country_name=$2,
continent_name=$3
where country_id=$4
returning country_id, country_code, country_name, continent_name
`

type UpdateCountryParams struct {
	CountryCode   pgtype.Text
	CountryName   pgtype.Text
	ContinentName pgtype.Text
	CountryID     int64
}

func (q *Queries) UpdateCountry(ctx context.Context, arg UpdateCountryParams) (Country, error) {
	row := q.db.QueryRow(ctx, updateCountry,
		arg.CountryCode,
		arg.CountryName,
		arg.ContinentName,
		arg.CountryID,
	)
	var i Country
	err := row.Scan(
		&i.CountryID,
		&i.CountryCode,
		&i.CountryName,
		&i.ContinentName,
	)
	return i, err
}

const updateMerchant = `-- name: UpdateMerchant :one
update merchants
set merchant_first_name=$1,
merchant_last_name=$2,
country_id=$3
where merchant_id=$4
returning merchant_id, merchant_first_name, merchant_last_name, country_id, user_id
`

type UpdateMerchantParams struct {
	MerchantFirstName pgtype.Text
	MerchantLastName  pgtype.Text
	CountryID         pgtype.Int8
	MerchantID        int64
}

func (q *Queries) UpdateMerchant(ctx context.Context, arg UpdateMerchantParams) (Merchant, error) {
	row := q.db.QueryRow(ctx, updateMerchant,
		arg.MerchantFirstName,
		arg.MerchantLastName,
		arg.CountryID,
		arg.MerchantID,
	)
	var i Merchant
	err := row.Scan(
		&i.MerchantID,
		&i.MerchantFirstName,
		&i.MerchantLastName,
		&i.CountryID,
		&i.UserID,
	)
	return i, err
}

const updateOrderHeader = `-- name: UpdateOrderHeader :one
update order_header 
set order_date=$1,
order_status_id=$2
where order_header_id=$3
returning order_header_id, order_date, order_status_id, user_id, merchant_id
`

type UpdateOrderHeaderParams struct {
	OrderDate     pgtype.Timestamp
	OrderStatusID pgtype.Int8
	OrderHeaderID int64
}

func (q *Queries) UpdateOrderHeader(ctx context.Context, arg UpdateOrderHeaderParams) (OrderHeader, error) {
	row := q.db.QueryRow(ctx, updateOrderHeader, arg.OrderDate, arg.OrderStatusID, arg.OrderHeaderID)
	var i OrderHeader
	err := row.Scan(
		&i.OrderHeaderID,
		&i.OrderDate,
		&i.OrderStatusID,
		&i.UserID,
		&i.MerchantID,
	)
	return i, err
}

const updateOrderLine = `-- name: UpdateOrderLine :one
update order_lines
set quantity=$1,
product_id=$2
where line_id=$3
returning line_id, product_id, order_header_id, quantity
`

type UpdateOrderLineParams struct {
	Quantity  pgtype.Int4
	ProductID pgtype.Int8
	LineID    int64
}

func (q *Queries) UpdateOrderLine(ctx context.Context, arg UpdateOrderLineParams) (OrderLine, error) {
	row := q.db.QueryRow(ctx, updateOrderLine, arg.Quantity, arg.ProductID, arg.LineID)
	var i OrderLine
	err := row.Scan(
		&i.LineID,
		&i.ProductID,
		&i.OrderHeaderID,
		&i.Quantity,
	)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
update order_statuses
set order_status_name=$1
where order_status_id=$2
returning order_status_id, order_status_name
`

type UpdateOrderStatusParams struct {
	OrderStatusName pgtype.Text
	OrderStatusID   int64
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (OrderStatus, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.OrderStatusName, arg.OrderStatusID)
	var i OrderStatus
	err := row.Scan(&i.OrderStatusID, &i.OrderStatusName)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
update products
set product_name=$1,
product_price=$2,
product_status_id=$3,
merchant_id=$4
where product_id=$5
returning product_id, product_name, product_price, product_status_id, merchant_id
`

type UpdateProductParams struct {
	ProductName     pgtype.Text
	ProductPrice    pgtype.Int4
	ProductStatusID pgtype.Int8
	MerchantID      pgtype.Int8
	ProductID       int64
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ProductName,
		arg.ProductPrice,
		arg.ProductStatusID,
		arg.MerchantID,
		arg.ProductID,
	)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.ProductPrice,
		&i.ProductStatusID,
		&i.MerchantID,
	)
	return i, err
}

const updateProductStatus = `-- name: UpdateProductStatus :one
update product_statuses
set status_name=$1
where product_status_id=$2
returning product_status_id, status_name
`

type UpdateProductStatusParams struct {
	StatusName      pgtype.Text
	ProductStatusID int64
}

func (q *Queries) UpdateProductStatus(ctx context.Context, arg UpdateProductStatusParams) (ProductStatus, error) {
	row := q.db.QueryRow(ctx, updateProductStatus, arg.StatusName, arg.ProductStatusID)
	var i ProductStatus
	err := row.Scan(&i.ProductStatusID, &i.StatusName)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
update users
set first_name=$1,
last_name=$2,
country_id=$3
where user_id=$4
returning user_id, first_name, last_name, salt, password, email, country_id
`

type UpdateUserParams struct {
	FirstName pgtype.Text
	LastName  pgtype.Text
	CountryID pgtype.Int8
	UserID    int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.CountryID,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Salt,
		&i.Password,
		&i.Email,
		&i.CountryID,
	)
	return i, err
}
