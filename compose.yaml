# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  postgres:
    image: postgres:12-alpine
    environment:
      - POSTGRES_USER=alpine12
      - POSTGRES_PASSWORD=password12
      - POSTGRES_DB=simple_store
    ports:
      - "5000:5432"
    volumes:
      - postgres_db:/var/lib/postgresql/data
    networks:
      - mynetwork
  server:
      build:
        context: .
        dockerfile: Dockerfile
      ports:
        - "2000:2000"
      environment:
        - DB_CONNECTION=postgresql://alpine12:password12@postgres:5432/simple_store?sslmode=disable
      depends_on:
        - postgres
      networks:
        - mynetwork
      entrypoint: ["/app/wait-for.sh","postgres:5432","--","/app/start.sh"]
      command: ["/app/main"]
volumes:
  postgres_db:
    driver: local

networks:
  mynetwork:
    external: true
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

